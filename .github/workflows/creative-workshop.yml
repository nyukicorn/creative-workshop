name: Creative Workshop Production

on:
  workflow_dispatch:
    inputs:
      theme:
        description: 'Creative theme (fantasy, sci-fi, nature, etc.)'
        required: true
        default: 'fantasy'
      quality_level:
        description: 'Quality level'
        required: true
        default: 'standard'
        type: choice
        options:
          - draft
          - standard
          - high

permissions:
  id-token: write
  contents: read

jobs:
  generate-assets:
    runs-on: ubuntu-latest
    outputs:
      assets-generated: ${{ steps.check-assets.outputs.success }}
      output-dir: ${{ steps.setup-dirs.outputs.output-dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker Image
        run: |
          docker build -t claude-workshop .
      
      - name: Setup Output Directories
        id: setup-dirs
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          OUTPUT_DIR="./assets/${TIMESTAMP}"
          ABSOLUTE_OUTPUT_DIR="$(pwd)/assets/${TIMESTAMP}"
          echo "output-dir=${OUTPUT_DIR}" >> $GITHUB_OUTPUT
          echo "OUTPUT_DIR=${OUTPUT_DIR}" >> $GITHUB_ENV
          echo "ABSOLUTE_OUTPUT_DIR=${ABSOLUTE_OUTPUT_DIR}" >> $GITHUB_ENV
          mkdir -p ${OUTPUT_DIR}/{backgrounds,audio,models,optimized}
          echo "üìÅ Created output directory: ${OUTPUT_DIR}"
          echo "üìç Absolute path: ${ABSOLUTE_OUTPUT_DIR}"
          echo "üåê Current working directory: $(pwd)"
      
      - name: Install Claude Code SDK
        run: |
          npm install -g @anthropic-ai/claude-code@1.0.43
      
      - name: Reset MCP Before Background Generation
        run: |
          echo "üîÑ Resetting MCP connections..."
          pkill -f "claude" || true
          sleep 3
          echo "‚úÖ MCP connections reset"
      
      - name: Generate 360 Panorama Background  
        timeout-minutes: 8
        run: |
          echo "üåÖ Generating 360 degree panorama background..."
          echo "üìÅ Output directory: ${OUTPUT_DIR}/backgrounds/"
          echo "üìç Absolute path: ${ABSOLUTE_OUTPUT_DIR}/backgrounds/"
          docker run --rm \
            -v $(pwd):/workspace \
            claude-workshop \
            claude --dangerously-skip-permissions --mcp-config ./configs/mcp-kamuicode.json "Generate a 360-degree panoramic background image for a ${{ github.event.inputs.theme }} world using t2i-google-imagen3. $(cat ./prompts/panorama.txt). After generating, download the image and save it to ${ABSOLUTE_OUTPUT_DIR}/backgrounds/ with filename panorama_background.png. Make sure the file is actually saved to the filesystem."
          
          echo "üì¶ Moving generated files from temp directories..."
          docker run --rm \
            -v $(pwd):/workspace \
            claude-workshop \
            bash -c "find /tmp/ /home/claude/ -name '*.png' -o -name '*panorama*' 2>/dev/null | head -5 | while read file; do if [ -f \"\$file\" ]; then echo \"Moving \$file to ${ABSOLUTE_OUTPUT_DIR}/backgrounds/panorama_background.png\"; cp \"\$file\" \"${ABSOLUTE_OUTPUT_DIR}/backgrounds/panorama_background.png\" && chmod 644 \"${ABSOLUTE_OUTPUT_DIR}/backgrounds/panorama_background.png\" && break; fi; done"
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      
      - name: Reset MCP After Background Generation
        run: |
          echo "üîÑ Resetting MCP connections..."
          pkill -f "claude" || true
          sleep 3
      
      - name: Generate Background Music
        timeout-minutes: 8
        run: |
          echo "üéµ Generating background music..."
          echo "üìÅ Output directory: ${OUTPUT_DIR}/audio/"
          echo "üìç Absolute path: ${ABSOLUTE_OUTPUT_DIR}/audio/"
          docker run --rm \
            -v $(pwd):/workspace \
            claude-workshop \
            claude --dangerously-skip-permissions --mcp-config ./configs/mcp-kamuicode.json "Generate background music for a ${{ github.event.inputs.theme }} themed 3D environment using t2m-google-lyria. $(cat ./prompts/music.txt). After generating, download the audio file and save it to ${ABSOLUTE_OUTPUT_DIR}/audio/ with filename background_music.wav. Make sure the file is actually saved to the filesystem."
          
          echo "üì¶ Moving generated files from temp directories..."
          docker run --rm \
            -v $(pwd):/workspace \
            claude-workshop \
            bash -c "find /tmp/ /home/claude/ -name '*.wav' -o -name '*music*' 2>/dev/null | head -5 | while read file; do if [ -f \"\$file\" ]; then echo \"Moving \$file to ${ABSOLUTE_OUTPUT_DIR}/audio/background_music.wav\"; cp \"\$file\" \"${ABSOLUTE_OUTPUT_DIR}/audio/background_music.wav\" && chmod 644 \"${ABSOLUTE_OUTPUT_DIR}/audio/background_music.wav\" && break; fi; done"
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      
      - name: Reset MCP After Music Generation
        run: |
          echo "üîÑ Resetting MCP connections..."
          pkill -f "claude" || true
          sleep 3
      
      - name: Generate 3D Unicorn Model
        timeout-minutes: 12
        run: |
          echo "ü¶Ñ Generating 3D unicorn model..."
          echo "üìÅ Output directory: ${OUTPUT_DIR}/models/"
          echo "üìç Absolute path: ${ABSOLUTE_OUTPUT_DIR}/models/"
          docker run --rm \
            -v $(pwd):/workspace \
            claude-workshop \
            claude --dangerously-skip-permissions --mcp-config ./configs/mcp-kamuicode.json "Generate a 3D unicorn model for a ${{ github.event.inputs.theme }} themed environment using i2i3d-fal-hunyuan3d-v21. $(cat ./prompts/unicorn.txt). After generating, download the 3D model file and save it to ${ABSOLUTE_OUTPUT_DIR}/models/ with filename unicorn_model.glb. Make sure the file is actually saved to the filesystem."
          
          echo "üì¶ Moving generated files from temp directories..."
          docker run --rm \
            -v $(pwd):/workspace \
            claude-workshop \
            bash -c "find /tmp/ /home/claude/ -name '*.glb' -o -name '*unicorn*' 2>/dev/null | head -5 | while read file; do if [ -f \"\$file\" ]; then echo \"Moving \$file to ${ABSOLUTE_OUTPUT_DIR}/models/unicorn_model.glb\"; cp \"\$file\" \"${ABSOLUTE_OUTPUT_DIR}/models/unicorn_model.glb\" && chmod 644 \"${ABSOLUTE_OUTPUT_DIR}/models/unicorn_model.glb\" && break; fi; done"
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      
      - name: Reset MCP After 3D Generation
        run: |
          echo "üîÑ Resetting MCP connections..."
          pkill -f "claude" || true
          sleep 3
      
      - name: Check Assets Generation
        id: check-assets
        run: |
          echo "üîç Checking generated assets in ${OUTPUT_DIR}..."
          ls -la ${OUTPUT_DIR}/
          echo "üîç Checking backgrounds directory..."
          ls -la ${OUTPUT_DIR}/backgrounds/
          echo "üîç Checking audio directory..."
          ls -la ${OUTPUT_DIR}/audio/
          echo "üîç Checking models directory..."
          ls -la ${OUTPUT_DIR}/models/
          
          BACKGROUND_FILES=$(find ${OUTPUT_DIR}/backgrounds -name '*.png' -o -name '*.jpg' 2>/dev/null | wc -l)
          AUDIO_FILES=$(find ${OUTPUT_DIR}/audio -name '*.wav' -o -name '*.mp3' 2>/dev/null | wc -l)
          MODEL_FILES=$(find ${OUTPUT_DIR}/models -name '*.glb' -o -name '*.obj' 2>/dev/null | wc -l)
          
          echo "üìä Found: ${BACKGROUND_FILES} background files, ${AUDIO_FILES} audio files, ${MODEL_FILES} model files"
          
          if [ ${BACKGROUND_FILES} -gt 0 ] && [ ${AUDIO_FILES} -gt 0 ] && [ ${MODEL_FILES} -gt 0 ]; then
            echo "‚úÖ All assets generated successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Some assets missing"
            echo "success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload Assets
        uses: actions/upload-artifact@v4
        with:
          name: generated-assets-${{ steps.setup-dirs.outputs.output-dir }}
          path: ${{ steps.setup-dirs.outputs.output-dir }}/

  process-assets:
    needs: generate-assets
    runs-on: ubuntu-latest
    if: needs.generate-assets.outputs.assets-generated == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Assets
        uses: actions/download-artifact@v4
        with:
          name: generated-assets
          path: assets/
      
      - name: Setup Blender
        run: |
          wget https://download.blender.org/release/Blender4.0/blender-4.0.0-linux-x64.tar.xz
          tar -xf blender-4.0.0-linux-x64.tar.xz
          echo "BLENDER_PATH=$(pwd)/blender-4.0.0-linux-x64/blender" >> $GITHUB_ENV
      
      - name: Blender Processing
        run: |
          echo "üé® Processing 3D models in Blender..."
          claude-code "Process and optimize the 3D models using Blender MCP. Input: ./assets/models/, Output: ./assets/optimized/. Use the Blender MCP configuration from ./configs/mcp-config.json"
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          BLENDER_PATH: ${{ env.BLENDER_PATH }}
      
      - name: Three.js Integration
        run: |
          echo "üåê Creating Three.js world..."
          claude-code "Create a Three.js world integrating all assets: panorama background, 3D models, and audio. Input: ./assets/, Output: ./dist/. Use Three.js MCP configuration from ./configs/mcp-config.json"
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      
      - name: Upload Final Build
        uses: actions/upload-artifact@v4
        with:
          name: final-build
          path: dist/

  quality-check:
    needs: process-assets
    runs-on: ubuntu-latest
    outputs:
      quality-passed: ${{ steps.quality-test.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Final Build
        uses: actions/download-artifact@v4
        with:
          name: final-build
          path: dist/
      
      - name: Quality Assessment
        id: quality-test
        run: |
          echo "üîç Running quality checks..."
          claude-code "Perform quality assessment on the final build. Check rendering performance, audio sync, model quality. Input: ./dist/, Quality level: ${{ github.event.inputs.quality_level }}. Use criteria from ./configs/quality-criteria.yaml"
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      
      - name: Generate Quality Report
        if: always()
        run: |
          echo "üìä Generating quality report..."
          echo "Quality Check Results" > quality-report.md
          echo "===================" >> quality-report.md
          echo "Theme: ${{ github.event.inputs.theme }}" >> quality-report.md
          echo "Quality Level: ${{ github.event.inputs.quality_level }}" >> quality-report.md
          echo "Status: ${{ steps.quality-test.outputs.passed }}" >> quality-report.md
      
      - name: Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md

  deploy:
    needs: quality-check
    runs-on: ubuntu-latest
    if: needs.quality-check.outputs.quality-passed == 'true'
    steps:
      - name: Download Final Build
        uses: actions/download-artifact@v4
        with:
          name: final-build
          path: dist/
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
      
      - name: Success Notification
        run: |
          echo "üéâ Creative workshop production completed successfully!"
          echo "üåê Deployed to: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

  retry-on-failure:
    needs: [generate-assets, process-assets, quality-check]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Retry Logic
        run: |
          echo "üîÑ Retrying failed steps..."
          # Â§±ÊïóÊôÇ„ÅÆÂÜçÂÆüË°å„É≠„Ç∏„ÉÉ„ÇØ
          echo "Failed job will be retried with adjusted parameters"