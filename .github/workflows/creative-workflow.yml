name: Creative Workshop v2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  creative-workflow:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Python and Dependencies
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Dependencies
      run: |
        pip install requests pillow
        
    - name: Install Claude Code CLI
      run: |
        npm config get registry
        npm cache clean --force
        npm install -g @anthropic-ai/claude-code
        which claude || { echo "❌ claude コマンドが見つかりません"; exit 1; }
        
    - name: Setup MCP Config
      run: |
        mkdir -p ~/.claude
        cp configs/mcp-kamuicode.json ~/.claude/mcp-config.json
        echo "MCP設定内容確認:"
        cat ~/.claude/mcp-config.json
        echo "Kamui Code MCP URLのみを使用することを確認"
        grep -q "mcp-veo3-fast-only" ~/.claude/mcp-config.json && echo "✅ Kamui Code MCP確認済み" || echo "❌ 設定エラー"
        
    - name: Phase 1 - Generate Assets with Claude Code + Kamui MCP
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "Claude Code + Kamui Code MCPで新しい素材を生成開始"
        mkdir -p assets/panorama assets/audio
        
        echo "🖼️ Imagen3でパノラマ画像生成中..."
        claude --mcp-config=~/.claude/mcp-config.json "Kamui Code MCPのImagen3を使用して、「神秘的な森の中の古い石の遺跡、夕暮れの光が差し込む幻想的な360度パノラマ風景、Equirectangular形式」というテーマで1024x1024サイズの画像を現在のディレクトリのassets/panorama/panorama_landscape.pngに保存してください。絶対にGoogle APIを直接呼び出さず、必ずKamui Code MCPを経由してください。"
        
        echo "🎵 Lyriaでアンビエント音楽生成中..."
        claude --mcp-config=~/.claude/mcp-config.json "Kamui Code MCPのLyriaを使用して、「森の自然音とアンビエント、VR体験に適したリラックスできるサウンドスケープ、60秒ループ可能」というテーマで音楽を現在のディレクトリのassets/audio/ambient_background.wavに保存してください。絶対にGoogle APIを直接呼び出さず、必ずKamui Code MCPを経由してください。"
        
        # 生成結果確認
        echo "📊 生成結果確認"
        ls -la assets/panorama/ || echo "パノラマディレクトリなし"
        ls -la assets/audio/ || echo "オーディオディレクトリなし"
        
        if [ -f "assets/panorama/panorama_landscape.png" ]; then
            echo "✅ パノラマ画像生成完了: $(du -h assets/panorama/panorama_landscape.png | cut -f1)"
        else
            echo "❌ パノラマ画像生成失敗"
        fi
        
        if [ -f "assets/audio/ambient_background.wav" ]; then
            echo "✅ アンビエント音楽生成完了: $(du -h assets/audio/ambient_background.wav | cut -f1)"
        else
            echo "❌ アンビエント音楽生成失敗"
        fi
        
    - name: Verify Panorama Asset Generation
      run: |
        echo "パノラマ素材生成確認"
        ls -la assets/panorama/ || echo "No panorama directory"
        ls -la assets/audio/ || echo "No audio directory"
        echo "ファイルサイズ確認"
        du -h assets/panorama/* || echo "No panorama files"
        du -h assets/audio/* || echo "No audio files"
        
    - name: Upload Generated Assets
      uses: actions/upload-artifact@v4
      with:
        name: generated-assets
        path: assets/
        retention-days: 30
        
    - name: Phase 2 - Panorama VR Integration (Three.js)
      run: |
        echo "Three.jsでパノラマVR統合開始"
        mkdir -p dist
        python3 << 'EOF'
        import os
        import json
        
        # Three.js パノラマビューワー生成
        html_content = '''<!DOCTYPE html>
        <html lang="ja">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>360° Panorama VR Experience</title>
            <style>
                body { margin: 0; overflow: hidden; font-family: Arial, sans-serif; }
                #info { position: absolute; top: 10px; left: 10px; color: white; z-index: 100; }
                #controls { position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); z-index: 100; }
                button { padding: 10px 20px; margin: 5px; background: rgba(0,0,0,0.7); color: white; border: none; border-radius: 5px; cursor: pointer; }
                button:hover { background: rgba(0,0,0,0.9); }
            </style>
        </head>
        <body>
            <div id="info">
                <h3>360° Panorama VR</h3>
                <p>ドラッグで視点移動 | ホイールでズーム | VR対応</p>
            </div>
            <div id="controls">
                <button onclick="toggleAudio()">音楽 ON/OFF</button>
                <button onclick="enterVR()">VRモード</button>
            </div>
            <audio id="bgAudio" loop>
                <source src="./assets/audio/ambient_background.wav" type="audio/wav">
            </audio>
            
            <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
            <script>
                let scene, camera, renderer, controls, audio;
                
                function init() {
                    // シーン設定
                    scene = new THREE.Scene();
                    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
                    renderer = new THREE.WebGLRenderer({ antialias: true });
                    renderer.setSize(window.innerWidth, window.innerHeight);
                    document.body.appendChild(renderer.domElement);
                    
                    // コントロール設定
                    controls = new THREE.OrbitControls(camera, renderer.domElement);
                    controls.enableDamping = true;
                    controls.dampingFactor = 0.05;
                    controls.enableZoom = true;
                    controls.enablePan = false;
                    controls.enableRotate = true;
                    controls.rotateSpeed = 0.5;
                    controls.zoomSpeed = 1.5;
                    controls.minDistance = 1;
                    controls.maxDistance = 200;
                    
                    // パノラマスフィア作成
                    const geometry = new THREE.SphereGeometry(500, 60, 40);
                    geometry.scale(-1, 1, 1); // 内側から見えるように反転
                    
                    const loader = new THREE.TextureLoader();
                    loader.load('./assets/panorama/panorama_landscape.png', function(texture) {
                        const material = new THREE.MeshBasicMaterial({ map: texture });
                        const sphere = new THREE.Mesh(geometry, material);
                        scene.add(sphere);
                    });
                    
                    // 音楽設定
                    audio = document.getElementById('bgAudio');
                    
                    // レンダリングループ
                    animate();
                }
                
                function animate() {
                    requestAnimationFrame(animate);
                    controls.update();
                    renderer.render(scene, camera);
                }
                
                function toggleAudio() {
                    if (audio.paused) {
                        audio.play();
                    } else {
                        audio.pause();
                    }
                }
                
                function enterVR() {
                    if (navigator.xr) {
                        // WebXR VR実装
                        alert('VR機能は開発中です');
                    } else {
                        alert('このブラウザはVRに対応していません');
                    }
                }
                
                // ウィンドウリサイズ対応
                window.addEventListener('resize', function() {
                    camera.aspect = window.innerWidth / window.innerHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(window.innerWidth, window.innerHeight);
                });
                
                init();
            </script>
        </body>
        </html>'''
        
        with open('dist/index.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
            
        print("パノラマVRビューワー生成完了")
        
        # assetsフォルダをdistにコピー
        import shutil
        if os.path.exists('assets'):
            if os.path.exists('dist/assets'):
                shutil.rmtree('dist/assets')
            shutil.copytree('assets', 'dist/assets')
            print("assetsフォルダをdistにコピー完了")
        EOF
        
    - name: Phase 3 - Deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist